@{
	ViewData["Title"] = "Home Page";
}

<div class="text-center">
	<h1 class="display-4">Welcome</h1>
	<p>SignalR with ASP.NET Core</a>.</p>
</div>

<div class="container">
		<div class="row">&nbsp;</div>
		<div class="row">
			<div class="col-2">User</div>
			<div class="col-4"><input type="text" id="userInput" /></div>
		</div>
		<div class="row">
			<div class="col-2">Message</div>
			<div class="col-4"><input type="text" id="messageInput" /></div>
		</div>
		<div class="row">&nbsp;</div>
		<div class="row">
			<div class="col-6">
				<input type="button" id="sendButton" value="Send Message" />
			</div>
		</div>
	</div>
	<div class="row">
		<div class="col-12">
			<hr />
		</div>
	</div>
	<div class="row">
		<div class="col-6">
			<ul id="messagesList"></ul>
		</div>
	</div>

@section Scripts{

															<script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
														   <script type="text/javascript">

							"use strict";


							var connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").configureLogging(signalR.LogLevel.Information).withAutomaticReconnect().build();

							connection.onreconnecting(error => {
								console.assert(connection.state === signalR.HubConnectionState.Reconnecting);

								document.getElementById("messageInput").disabled = true;

								const li = document.createElement("li");
								li.textContent = `Connection lost due to error "${error}". Reconnecting.`;
								document.getElementById("messageList").appendChild(li);
							});

							//Disable the send button until connection is established.
							document.getElementById("sendButton").disabled = true;

							connection.on("ReceiveMessage", function(user, message) {
								var li = document.createElement("li");
								document.getElementById("messagesList").appendChild(li);
								// We can assign user-supplied strings to an element's textContent because it
								// is not interpreted as markup. If you're assigning in any other way, you 
								// should be aware of possible script injection concerns.
								li.textContent = `${user} says ${message}`;
							});

							connection.start().then(function() {
								document.getElementById("sendButton").disabled = false;
							}).catch(function(err) {
								return console.error(err.toString());
							});

							document.getElementById("sendButton").addEventListener("click", function(event) {
								var user = document.getElementById("userInput").value;
								var message = document.getElementById("messageInput").value;
								connection.invoke("SendMessage", user, message).catch(function(err) {
									return console.error(err.toString());
								});
								$("#messageInput").val('');
								$("#messageInput").focus();
								event.preventDefault();
							});



							$('#messageInput').on('keypress', function(e) {
								if (e.which === 13) {

									//Disable textbox to prevent multiple submit
									$(this).attr("disabled", "disabled");

									//Do Stuff, submit, etc..
									$("#sendButton").trigger("click");
									//Enable the textbox again if needed.
									$(this).removeAttr("disabled");
								}
							});

												</script>

}